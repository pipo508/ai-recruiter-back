import os
import re
import json
import google.generativeai as genai
from google.generativeai import GenerationConfig
from dotenv import load_dotenv

load_dotenv()

# ‚îÄ‚îÄ‚îÄ Configuraci√≥n de la API Key ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise RuntimeError("Define la variable de entorno GOOGLE_API_KEY antes de ejecutar.")
genai.configure(api_key=api_key)

# ‚îÄ‚îÄ‚îÄ Par√°metros del modelo ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=GenerationConfig(
        temperature=0.0,
        top_p=0.7
    )
)

# ‚îÄ‚îÄ‚îÄ Directorios y manifiesto ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
INPUT_DIR     = os.getenv("TXT_DIR")
OUTPUT_DIR    = os.getenv("REWRITTEN_DIR")

if not os.path.exists(INPUT_DIR):
    raise RuntimeError(f"Directorio de entrada '{INPUT_DIR}' no encontrado.")
if not os.path.exists(OUTPUT_DIR):
    os.makedirs(OUTPUT_DIR, exist_ok=True)  

MANIFEST_PATH = os.path.join(OUTPUT_DIR, "manifest.json")

os.makedirs(OUTPUT_DIR, exist_ok=True)

# Cargamos o inicializamos el manifiesto
if os.path.exists(MANIFEST_PATH):
    with open(MANIFEST_PATH, "r", encoding="utf-8") as mf:
        manifest = json.load(mf)   # { "original.txt": "Salida_Nombre_Apellido.txt", ... }
else:
    manifest = {}

# ‚îÄ‚îÄ‚îÄ Plantilla de prompt ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PROMPT_TEMPLATE = """
Antes de comenzar, detecta el nombre completo de la persona (nombre y apellido/s) en el texto. Escr√≠belo en la primera l√≠nea as√≠:
Nombre detectado: NOMBRE COMPLETO

Luego, reescribe el siguiente texto con un lenguaje claro, preciso y profesional.

Organiza la informaci√≥n extra√≠da en secciones coherentes y bien tituladas, corrigiendo cualquier error de formato, ortograf√≠a o estructura causado por el OCR.

üîç Aseg√∫rate de:
- Extraer y ordenar correctamente la informaci√≥n relevante, incluso si el texto original est√° desordenado.
- Corregir nombres propios, t√≠tulos, instituciones, fechas, correos electr√≥nicos, direcciones y tel√©fonos.
- Mantener un estilo formal, directo y sin adornos innecesarios.
- Elimina cualquier rastro de formato original, como saltos de l√≠nea extra, guiones, o marcas de OCR.
- Si hay listas en el texto original, mant√©nlas como listas en el texto reescrito, usando vi√±etas o n√∫meros seg√∫n sea apropiado.
- Aseg√∫rate de que no haya espacios extra ni caracteres especiales que no sean necesarios.

üóÇ Estructura sugerida (sigue este orden):
1. Informaci√≥n personal (incluye el nombre completo)
2. Perfil profesional (si aplica)
3. Experiencia laboral
4. Formaci√≥n acad√©mica
5. Certificaciones
6. Idiomas
7. Habilidades t√©cnicas
8. Referencias (si las hay)
9. Informaci√≥n de contacto

üìå Formato:
- Usa t√≠tulos claros para cada secci√≥n.
- Nombres de empresas, instituciones y cargos en may√∫scula inicial.
- Fechas en formato MM/AAAA o solo AAAA si no hay m√°s detalle.
- Correos electr√≥nicos y tel√©fonos con formato estandarizado.

‚ö†Ô∏è Si el nombre del archivo "{file_base}" aparece dentro del texto, ign√≥ralo.

Texto original:
\"\"\"{content}\"\"\"
"""

# ‚îÄ‚îÄ‚îÄ Funci√≥n auxiliar para limpiar nombre detectado ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def limpiar_nombre_detectado(linea):
    # L√≠nea: "Nombre detectado: Juan P√©rez"
    nombre = linea.split(":", 1)[1].strip().lower()
    nombre = re.sub(r'\s+', ' ', nombre)
    # Convertir a formato Archivo: "Juan_Perez.txt"
    return nombre.title().replace(" ", "_") + ".txt"

# ‚îÄ‚îÄ‚îÄ Procesamiento de archivos ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
for fname in os.listdir(INPUT_DIR):
    if not fname.lower().endswith(".txt"):
        continue

    # Si ya fue procesado, lo saltamos
    if fname in manifest:
        print(f"‚ö†Ô∏è {fname} ya procesado como {manifest[fname]}. Saltado.")
        continue

    in_path   = os.path.join(INPUT_DIR, fname)
    file_base = os.path.splitext(fname)[0]

    with open(in_path, "r", encoding="utf-8") as f:
        content = f.read()

    # Creamos el prompt
    prompt = PROMPT_TEMPLATE.format(content=content, file_base=file_base)

    try:
        # Llamada a Gemini
        response  = model.generate_content(prompt)
        rewritten = response.text.strip()

        # Extraemos el nombre detectado y el contenido reescrito
        lines = rewritten.splitlines()
        if len(lines) > 0 and lines[0].lower().startswith("nombre detectado:"):
            primera_linea = lines[0]
            nuevo_nombre = limpiar_nombre_detectado(primera_linea)
            content = "\n".join(lines[1:]).strip()  # Tomamos solo el contenido a partir de la segunda l√≠nea
        else:
            # Fallback en caso de que Gemini no cumpla el formato
            nuevo_nombre = fname
            content = rewritten.strip()

        # Guardamos el archivo reescrito
        out_path = os.path.join(OUTPUT_DIR, nuevo_nombre)
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(content)

        # Actualizamos el manifiesto y lo persistimos
        manifest[fname] = nuevo_nombre
        with open(MANIFEST_PATH, "w", encoding="utf-8") as mf:
            json.dump(manifest, mf, ensure_ascii=False, indent=2)

        print(f"‚úÖ {fname} reescrito y guardado como {nuevo_nombre}")

    except Exception as e:
        print(f"‚ùå Error con {fname}: {e}")